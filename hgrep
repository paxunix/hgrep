#!/usr/bin/perl


=head1 NAME

hgrep - output header + matches

=head1 SYNOPSIS

hgrep [grep options]

=head1 DESCRIPTION

Tries to work as much like grep as possible.

Prior to any matches, always output the first line of each input.
Handles stdin as well a file inputs.

=head1 EXAMPLES

ps -efl | hgrep someuser

Outputs the header from ps (no one remembers the order of the fields) and
any lines containing /someuser/.

=cut


use strict;


# If writing to stdout and the user has grep colouring set up, ensure it's
# on, since our invocation of grep will think it's not attached to an output
# terminal and therefore not output colour.
my $wantsColour = $ENV{GREP_COLOR} ne "" && -t STDOUT;

# Reading from stdin is handled specially because there is never a leading
# filename.
if (! -t STDIN)
{
    # Enable autoflush on stdout.  This ensures the header line shows up
    # before the first line of grep output.
    select(STDOUT);
    $| = 1;

    open(my $grep, "|-", "grep", @ARGV) or
        die("Failed opening grep pipe: $!");

    while (<STDIN>)
    {
        # Always output the first line (without grepping), and send the rest
        # to grep.
        print({$. == 1 ? *STDOUT : $grep} $_);
    }

    close($grep);
    exit($?);
}

# Peel file(like) arguments off the end since we have to read the header
# line from and pass them individually to grep.

my @files;
while (defined($ARGV[-1]) && -e $ARGV[-1])
{
    push(@files, pop(@ARGV));
}

my $includeFilenames = (@files > 1 || grep { $_ eq "-H" } @ARGV);
my $errors = 0;

for my $file (@files)
{
    open(my $fh, $file) or
        die("Failed to open $file for read: $!");

    my $header = <$fh>;
    close($fh);
    if (defined($header))
    {
        open(my $grep, "-|",
            "grep", ($wantsColour ? "--color=always" : ()),
                ($includeFilenames ? "-H" : ()), @ARGV, $file) or
            die("Failed to open grep pipe for read: $!");

        my $showedHeader = 0;
        while (<$grep>)
        {
            # As soon as we've seen one matched line from grep, output the
            # header.
            if (!$showedHeader)
            {
                print(($includeFilenames ? "$file:" : ()), $header);
                $showedHeader = 1;
            }

            print;
        }

        $errors |= close($grep);
    }
}

exit($errors);

# XXX:  really should have some kind of tests for this
